var express = require('express');
var session = require('express-session');
var bodyParser=require('body-parser');
var mongoose=require('mongoose');
var pug = require('pug');
var bcrypt = require('bcryptjs');

var Schema = mongoose.Schema;
var ObjectId = Schema.ObjectId;

// connect to mongo db
mongoose.connect('mongodb://localhost/auth');  // connect to the db

var User = mongoose.model('User', new Schema({
  id: ObjectId,
  firstName: String,
  lastName: String,
  email: { type: String, unique: true},
  password: String
}));




var Poll = mongoose.model('Poll', new Schema({
  id: ObjectId,
  question: String
}));

var Polloptions = mongoose.model('Polloptions', new Schema({
  id: ObjectId,
  pollid: String,
  option: String
}));

var Choices = mongoose.model('Choices', new Schema({
  id: ObjectId,
  option: String
}));

//var Pollresults = mongoose.model('Pollresults', new Schema({
var PollSchema = new mongoose.Schema({
  id: ObjectId,
  pollid: String,
  userid: String,
  option: String
});

PollSchema.index({ pollid: 1, userid: 1}, { unique: true });

var Pollresults = mongoose.model('Pollresult', PollSchema);

module.exports = Pollresults;

var app = express();

app.set('view engine', 'pug');  // use pug as the engine

app.locals.pretty = true;  // dont minify the html source code

app.use('/static',express.static('public'));

//  run the req through this middleware to make it available via req.body 
app.use(bodyParser.urlencoded({extended: true}));

//  prep the session middleware
app.use(session({
    name: 'session',
    secret  : '4j8sdf9832jojfdd8uf84jf21re',
    resave : false,
    saveUninitialized : false
}));

// this middleware will run before the other routes are processed,  it makes the user available on every page
app.use(function(req,res,next) {
    if ( req.session && req.session.user) {  // is there session and a user set in the session
        User.findOne({email: req.session.user.email }, function(err,user){ // check the db for the user
            if(user && !err) { // if we found the user and there is no error
              req.user = user;  // set the variable for use in our html page
              delete req.user.password; // remove password from the req so it cant be exposed
              req.session.user = user;  // refresh the session
              res.locals.user = user;  // make user avaiable as a variable in a view
            }
            next();  // continue processing the app function that was orginally called
        });
    } else  { 
        next();  //no session/user was set so just continue processing the app function that was orginally called
    }
});    
    
// this function makes sure the user is logged on, since its a regular function, it only runs for routes that specifically call it 
function  requireLogin (req,res,next) {
    if(!req.user) {  // if we dont have a user
        res.redirect('/login');  // send them to the login page
    } else {
        next();  // continue processing the app function
    }
}
    

// ------------------------------
//  Render the home page.
// ------------------------------
app.get('/', function(req, res) {
  res.render('index.pug');
});

// ------------------------------
//  Render the dashboard page.
// ------------------------------
app.get('/dashboard', requireLogin , function(req, res) {  // requireLogin will redirect them if they are not logged in
  res.render('dashboard.pug');
});


// ------------------------------
//  Render the registration page.
// ------------------------------
app.get('/register', function(req, res) {
  res.render('register.pug');
});

// ------------------------------
// handle post from the registration form
// ------------------------------
app.post('/register', function(req, res) {
    var hash = bcrypt.hashSync(req.body.password,bcrypt.genSaltSync(10)); // has the password
    var user = new User({
      firstName: req.body.firstName,
      lastName: req.body.lastName,
      email: req.body.email,
      password: hash
    });
    // save the posted data
    user.save(function(err) {
        if (err) {
          var error = 'Something bad happened! Please try again.';
          if (err.code === 11000) {  // non-unique will return 11000
            error = 'That email is already taken, please try another.';
          }
          res.render('register.pug', { error: error });
        } else {
            res.redirect('/polls');
        }
    });
});


// ------------------------------
//  Render the login page.
// ------------------------------
app.get('/login', function(req, res) {
  res.render('login.pug');
});

// ------------------------------
//  handle the post from the login page.
// ------------------------------
app.post('/login', function(req, res) {
  User.findOne({ email: req.body.email }, function(err, user) {  // find the user in the db
    if (!user || err) {
      res.render('login.pug', { error: "Incorrect email / password."});
    } else {
      if (bcrypt.compareSync(req.body.password,user.password)) {  // if passwords match
        req.session.user = user; //set the users cookie
        res.redirect('/polls');
      } else {
        res.render('login.pug', { error: "Incorrect email / password."});
      }
    }
  });
});

// ------------------------------
//  Handle the logout feature.
// ------------------------------
app.get('/logout', function(req, res) {
  if (req.session) {
    req.session.destroy();
  }
  res.redirect('/');
});


// ------------------------------
//  Render the polls page.
// ------------------------------
app.get('/polls', function(req, res) {
  //get current polls
  Poll.find({}, function(err, poll) {  // find all polls in the db
    if (!poll || err) {
      // no polls found
      res.redirect('/polls');
    } else {
      // found polls
      //res.locals.polls = poll;  // set the results in the response
      res.render('polls.pug',{ questions: poll});
    }  
  });
});

// ------------------------------
//  handle the post from polls page.
// ------------------------------
app.post('/polls', function(req, res) {
  //get the question from the db so we can display it
  Poll.findOne({_id:req.body.qid}, function(err, poll) {  // find all polls in the db
    if (!poll || err) {
      // no polls found
    } else {
      // found polls
     res.render('test.pug',{ questions: poll});
    }  
  });
});  


// ------------------------------
//  handle the create poll page
// ------------------------------
app.get('/create',requireLogin, function(req, res) {
  Choices.find({}, function(err, pollchoices) {
    if(!err) {
      res.render('createpoll.pug',{ choices: pollchoices}); 
    }
  });  
});

// ------------------------------
//  handle post from the create poll page
// ------------------------------
app.post('/create',requireLogin, function(req, res) {
  if(req.session && req.body.question){  // they are logged in and they submitted a question
    console.log("a new question has been submitted");
    //insert the question into the db

    var newpoll = new Poll({
          question: req.body.question,
        });
    //save the users choice
    newpoll.save(function(err,doc) {
        if (!err) {
           //save the choices
           // first split the command delimited values
           var ch=req.body.qchoices.split(",");
           for(var i=0;i<ch.length;i++){
             // create the new object
             var newchoice = new Polloptions({
               pollid: doc._id,
               option: ch[i]
              });
              console.log("new choice= " + newchoice);
              //insert it into the db
              newchoice.save(function(err) {
                if (err) throw err;
              });
           }
        }
       res.redirect('/polls');
    });


  } else {
      // no question was submitted, send them back
      res.redirect('/create');
      return;
  } 
});


// ------------------------------
//  listen for requests
// ------------------------------
app.listen(8080, function () {
        console.log('Listening on port 8080...');
});


function getthispoll(id){
  //get the poll from the db so we can display it
  Poll.findOne({_id:id}, function(err, poll) {  // find all polls in the db
    if (!poll || err) {
      // no polls found
      return null;
    } else {
      // found polls
     console.log("1 " + poll);
     return poll;
    }  
  });
}

function getoptions(qid){
  Polloptions.find({pollid: qid}, function(err, polloptions) { 
    console.log("get options? " + polloptions);
    if(!polloptions || err) {
       // not found
       return null;
    } else {
       return polloptions;
    }  
  });
}

function getresults(id){
  //get the poll from the db so we can display it
  var pollquestion="";
  Pollresults.findOne({}, function(err, pollresults) {
    if(!poll || err) {
      // not found
       return null;
    } else {
       return pollresults;
    }  
  });
}

function alreadyvoted(uid,qid){
  Pollresults.findOne({userid:uid, pollid:qid}, function(err, pollresults) {
    console.log("already voted? " + pollresults);
    if(!pollresults || err) {
      return false;
    } else {
      return true;
    }
  });
}